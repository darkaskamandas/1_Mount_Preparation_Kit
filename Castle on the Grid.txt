using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'minimumMoves' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. STRING_ARRAY grid
     *  2. INTEGER startX
     *  3. INTEGER startY
     *  4. INTEGER goalX
     *  5. INTEGER goalY
     */

    public static int minimumMoves(List<string> grid, int startX, int startY, int goalX, int goalY)
    {
        var size = grid.Count;
        byte[][] map = MapFromGrid(grid);
        map[goalX][goalY] = 3;
        map[startX][startY] = 1;
        var exe = new SortedSet<Move>();
        Move[] dirs = new Move[]{
            new Move(0,1,0),
            new Move(0,-1,0),
            new Move(0,0,1),
            new Move(0,0,-1),
        };

        exe.Add(new Move(0, startY, startX));
        while (true)
        {
            var m = exe.Min;
            exe.Remove(m);
            m.N++;
            foreach (var dir in dirs)
            {
                var p = m;
                do
                {
                    p = p + dir;
                    if (p.X < 0 || p.X >= size || p.Y < 0 || p.Y >= size) break;
                    var pcell = map[p.Y][p.X];
                    if (pcell == 3) return p.N;
                    if (pcell == 2) break;
                    if (pcell == 1) continue;
                    map[p.Y][p.X] = 1;
                    exe.Add(p);
                } while (true);
            }
        }
    }

    static byte[][] MapFromGrid(List<string> grid)
    {
        var ret = new byte[grid.Count][];
        for (int i = 0; i < ret.Length; i++)
        {
            var row = new byte[grid.Count];
            var line = grid[i];
            for (int j = 0; j < line.Length; j++)
            {
                if (line[j] == 'X') row[j] = 2;
            }
            ret[i] = row;
        }
        return ret;
    }

    struct Move : IComparable<Move>
    {
        public int N;
        public int X;
        public int Y;

        public Move(int n, int x, int y)
        {
            N = n;
            X = x;
            Y = y;
        }

        public int CompareTo(Move other)
        {
            var ret = N.CompareTo(other.N);
            if (ret == 0)
            {
                ret = X.CompareTo(other.X);
                if (ret == 0)
                {
                    ret = Y.CompareTo(other.Y);
                }
            }
            return ret;
        }

        public static Move operator +(Move a, Move b)
        {
            return new Move(a.N + b.N, a.X + b.X, a.Y + b.Y);
        }
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<string> grid = new List<string>();

        for (int i = 0; i < n; i++)
        {
            string gridItem = Console.ReadLine();
            grid.Add(gridItem);
        }

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int startX = Convert.ToInt32(firstMultipleInput[0]);

        int startY = Convert.ToInt32(firstMultipleInput[1]);

        int goalX = Convert.ToInt32(firstMultipleInput[2]);

        int goalY = Convert.ToInt32(firstMultipleInput[3]);

        int result = Result.minimumMoves(grid, startX, startY, goalX, goalY);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
