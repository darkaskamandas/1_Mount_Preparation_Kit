using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'maxSubarray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static List<int> maxSubarray(List<int> arr)
    {
        int max = int.MinValue;
        int maxPos = -1;
        var sum = 0;
        int maxSubSet = 0;
        int maxValue = int.MinValue;
        int maxVPos = -1;
        for (int i = 0; i < arr.Count; i++)
        {
            var v = arr[i];
            sum += v;
            if (sum > max)
            {
                max = sum;
                maxPos = i;
            }
            if (sum < 0)
            {
                sum = 0;
            }

            if (v > maxValue)
            {
                maxValue = v;
                maxVPos = i;
            }
            if (v > 0) maxSubSet += v;
        }

        if (maxValue < 0)
        {
            return new List<int>(new int[] { maxValue, maxValue });
        }
        if (maxValue > max)
        {
            max = maxValue;
            maxPos = maxVPos;
        }

        int maxSubArr = max;
        sum = 0;
        for (int i = 0; i < maxPos; i++)
        {
            var v = arr[i];
            sum += v;
            if (sum < 0) sum = 0;
            else
            {
                if (sum > maxSubArr)
                {
                    maxSubArr = sum;
                }
            }
        }

        var ret = new List<int>(2);
        ret.Add(maxSubArr);
        if (maxValue < 0) ret.Add(maxValue);
        else ret.Add(maxSubSet);
        return ret;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

            List<int> result = Result.maxSubarray(arr);

            textWriter.WriteLine(String.Join(" ", result));
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
