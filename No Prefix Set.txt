using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'noPrefix' function below.
     *
     * The function accepts STRING_ARRAY words as parameter.
     */

    public static void noPrefix(List<string> words)
    {
        Trie yes = new Trie();
        
        for(int i = 0; i < words.Count; i++) {
            if(yes.PreSert(words[i])) {
                Console.WriteLine("BAD SET");
                Console.WriteLine(words[i]);
                return;
            }
        }
        
        Console.WriteLine("GOOD SET");
        

    }
    
    public class Trie {
        private Node root;
        
        public Trie(){
            root = new Node('0');
        }
        
        public bool PreSert(string word) {
            return root.PreSert(word);
        }
        
        public class Node {
            char data;
            bool end;
            Dictionary<char, Node> children;
            
            public Node(char c, bool x = false) {
                data = c;
                end = x;
                children = new Dictionary<char, Node>();
            }
            
            public bool PreSert(string word) {
                if(end) {
                    return true;
                }
                
                char first = word[0];
                
                if(children.ContainsKey(first)) {
                    if(word.Length == 1) {
                        children[first].end = true;
                        return true;
                    }
                    
                    return children[first].PreSert(word.Substring(1));
                } else {
                    if(word.Length == 1) {
                        children.Add(first, new Node(first, true));
                        return false;
                    } else {
                        children.Add(first, new Node(first));
                        return children[first].PreSert(word.Substring(1));
                    }
                }
            }
        }
        
        
        
        
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<string> words = new List<string>();

        for (int i = 0; i < n; i++)
        {
            string wordsItem = Console.ReadLine();
            words.Add(wordsItem);
        }

        Result.noPrefix(words);
    }
}
